let base16colorspace=256

let &t_ut=''

set t_co=256
set background=dark
set colorcolumn=80
set encoding=UTF-8

autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

nmap <Leader>nt :tabnew<CR>
map <leader><tab> :tabn <CR>
map <leader>p<tab> :tabp <CR>

let g:coc_global_extensions = [
  \ 'coc-tsserver',
  \ 'coc-prettier',
  \ 'coc-eslint'
\]

let g:airline_powerline_fonts = 1

nmap <silent> <Leader>d <Plug>(coc-type-definition)
nmap <silent> <leader>f <Plug>(coc-definition)

nnoremap <leader>r :source $MYVIMRC<cr>
nnoremap <leader>h :e %:h

" Tab complete with COC
inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nnoremap <silent> <Leader>t :TestFile<CR>
nnoremap <silent> <Leader>ut :TestFile -u<CR>
nnoremap <silent> <Leader>s :TestNearest<CR>
nnoremap <silent> <Leader>us :TestNearest -u<CR>
nnoremap <silent> <Leader>l :TestLast<CR>
nnoremap <silent> <Leader>a :TestSuite<CR>
nnoremap <silent> <Leader>gt :TestVisit<CR>

let test#javascript#jest#executable = 'yarn test'

" NERDTree settings
let g:webdevicons_conceal_nerdtree_brackets = 1
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

if exists("g:loaded_webdevicons")
  call webdevicons#refresh()
endif

" JsonPath config
let g:jsonpath_register = ""

au FileType json noremap <buffer> <silent> <leader>d :call jsonpath#echo()<CR>
au FileType json noremap <buffer> <silent> <leader>g :call jsonpath#goto()<CR>
